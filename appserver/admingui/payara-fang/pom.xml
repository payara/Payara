<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>fish.payara.admingui</groupId>
        <artifactId>admingui</artifactId>
        <version>4.1.1.172-SNAPSHOT</version>
    </parent>

    <artifactId>payara-fang</artifactId>
    <name>Admin Console Install Fragment for Payara Fang</name>
    <packaging>distribution-fragment</packaging>

    <build>
        <!--
         In this module, all the files are statically stored as-is in the Subversion repository,
         so the simple copying from src/main/resources to target/classes that Maven does by default
         is suffice.

         But in more complex scenario, one can use maven-antrun-extended-plugin and use a series of Ant tasks
         to perform processing on resources, such as token replacement, file generation, pre-processing, etc.

         The following section shows how you can do this.
       -->
        <plugins>
            <plugin>
                <groupId>org.jvnet.maven-antrun-extended-plugin</groupId>
                <artifactId>maven-antrun-extended-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <configuration>
                            <tasks>
                                <!-- extract admin gui war file into the final location -->
                                <resolveArtifact artifactId="Fang" property="war" />
                                <unzip src="${war}" dest="target/classes/glassfish/lib/install/applications/__fang" />
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>fish.payara.monitoring</groupId>
            <artifactId>Fang</artifactId>
            <version>0.0.1-ALPHA</version>
            <type>war</type>
            <optional>true</optional>
        </dependency>
    </dependencies>
</project>
