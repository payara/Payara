<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2015 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<!-- Portions Copyright [2016-2020] [Payara Foundation and/or its affiliates] -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"> <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>fish.payara.server</groupId>
        <artifactId>payara-parent</artifactId>
        <version>5.2020.2-SNAPSHOT</version>
    </parent>
    
    <groupId>fish.payara.server.internal.packager</groupId>
    <artifactId>packages</artifactId>
    <packaging>pom</packaging>
    <name>Glassfish packages</name>

    <developers>
        <developer>
            <id>snjezana</id>
            <name>Snjezana Sevo-Zenzerovic</name>
            <url>http://blogs.sun.com/snjezana</url>
            <organization>Oracle, Inc.</organization>
            <roles>
                <role>developer</role>
            </roles>
        </developer>
        <developer>
            <id>romain_grecourt</id>
            <name>Romain Grecourt</name>
            <organization>Oracle, Inc</organization>
            <roles>
                <role>developer</role>
            </roles>
        </developer>
    </developers>

    <modules>
        <module>external</module> 
        <module>legal</module>
        <module>appserver-base</module>
        <module>appserver-core</module>
        <module>felix</module>
        <module>glassfish-hk2</module>
        <module>glassfish-grizzly</module>
        <module>glassfish-nucleus</module>
        <module>glassfish-corba-base</module>
        <module>glassfish-common</module>
        <module>glassfish-cluster</module>
        <module>glassfish-javahelp</module>
        <module>glassfish-management</module>
        <module>glassfish-grizzly-full</module>
        <module>glassfish-ha</module>
        <module>glassfish-jca</module>
        <module>glassfish-jpa</module>
        <module>glassfish-corba</module>
        <module>glassfish-jta</module>
        <module>glassfish-jsf</module>
        <module>glassfish-web</module>
        <module>glassfish-jdbc</module>
        <module>glassfish-gui</module>
        <module>glassfish-ejb-lite</module>
        <module>glassfish-common-full</module>
        <module>glassfish-jts</module>
        <module>glassfish-jms</module>
        <module>glassfish-ejb</module>
        <module>glassfish-cmp</module>
        <module>metro</module>
        <module>glassfish-appclient</module>
        <module>h2db</module>
        <module>jersey</module>
        <module>glassfish-jcdi</module>
        <module>mq</module>
        <module>glassfish-common-web</module>
        <module>glassfish-osgi</module>
        <module>glassfish-osgi-http</module>
        <module>glassfish-osgi-gui</module>
        <module>glassfish-web-incorporation</module>
        <module>glassfish-full-incorporation</module>
        <module>glassfish-web-profile</module>
        <module>glassfish-full-profile</module>
        <module>glassfish-osgi-incorporation</module>
        <module>glassfish-osgi-feature-pack</module>
        <module>glassfish-ant-tasks</module>
        <module>glassfish-appclient-l10n</module>
        <module>glassfish-cluster-l10n</module>
        <module>glassfish-cmp-l10n</module>
        <module>glassfish-common-full-l10n</module>
        <module>glassfish-common-l10n</module>
        <module>glassfish-ejb-l10n</module>
        <module>glassfish-ejb-lite-l10n</module>
        <module>glassfish-gui-l10n</module>
        <module>glassfish-jca-l10n</module>
        <module>glassfish-jdbc-l10n</module>
        <module>glassfish-jms-l10n</module>
        <module>glassfish-jpa-l10n</module>
        <module>glassfish-jta-l10n</module>
        <module>glassfish-jts-l10n</module>
        <module>glassfish-nucleus-l10n</module>
        <module>glassfish-web-l10n</module>
        <module>metro-l10n</module>
        <module>glassfish-management-l10n</module>
        <module>glassfish-common-web-l10n</module>
        <module>glassfish-osgi-gui-l10n</module>
        <module>glassfish-jmx</module>
        <module>glassfish-entitybeans-container</module>
        <module>json</module>
        <module>hazelcast</module>
        <module>hazelcast-l10n</module>
        <module>healthcheck</module>
        <module>phonehome</module>
        <module>requesttracing</module>
        <module>notification</module>
        <module>asadmin-recorder</module>
        <module>JMX-Monitoring</module>
        <module>payara-micro</module>
        <module>notification-email</module>
        <module>notification-hipchat</module>
        <module>notification-jms</module>
        <module>notification-slack</module>
        <module>notification-snmp</module>
        <module>notification-xmpp</module>
        <module>notification-newrelic</module>
        <module>notification-datadog</module>
        <module>zendesk-support</module>
        <module>payara-api</module>
        <module>environment-warning</module>
        <module>payara-rest-endpoints</module>
        <module>rest-monitoring</module>
        <module>payara-executor-service</module>
        <module>cdi-auth-roles</module>
        <module>yubikey-authentication</module>
        <module>docker</module>
        <module>microprofile-package</module>
        <module>opentracing-jaxws-package</module>
        <module>monitoring-console</module>
    </modules>
    
    <properties>
        <stage.dir.name>stage</stage.dir.name>
        <stage.dir>${project.build.directory}/${stage.dir.name}/${install.dir.name}</stage.dir>
        <temp.dir>${stage.dir}</temp.dir>        
        <temp.modules.dir>${temp.dir}/glassfish/modules</temp.modules.dir>
        <findbugs.skip>true</findbugs.skip>
        <zip.excludes>**\/META-INF,META-INF\/*</zip.excludes>
        <pkg_proto.py>src/main/resources/pkg_proto.py</pkg_proto.py>
    </properties>
    
    <build>
        <outputDirectory>${temp.dir}</outputDirectory>
        
        <pluginManagement>
            <plugins>
                 
                 <!-- 
                    1. In each module, copy file "pkg_conf.py" to it. The src/main/resources/pkg_proto.py that modules may
                    have imports this.
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <configuration>
                        <includeEmptyDirs>true</includeEmptyDirs>                    
                    </configuration>                    
                    <executions>
                        <execution>
                            <id>copy-resources</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${basedir}/..</outputDirectory>
                                <overwrite>true</overwrite>
                                <resources>          
                                    <resource>
                                        <directory>${basedir}/../resources</directory>
                                        <filtering>true</filtering>
                                        <includes>
                                            <include>pkg_conf.py</include>
                                        </includes>
                                    </resource>
                                </resources>              
                            </configuration>            
                        </execution>
                    </executions>
                </plugin>
            
            
                <!-- 
                    4. The heart of the packager, in each packager module, copy the listed jar dependencies and unpack any of the listed .zip dependencies 
                    of that module to e.g. target/stage/payara5/glassfish/modules/ 
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <executions>
                        
                        <!-- Copy bin/jar dependencies -->
                        <execution>
                            <id>process-step1</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${temp.modules.dir}</outputDirectory>
                                <useSubDirectoryPerType>false</useSubDirectoryPerType>
                                <overWriteReleases>false</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                                <includeScope>compile</includeScope>
                                <includeScope>runtime</includeScope>
                                <excludeArtifactIds>${packager.artifact.excludes}</excludeArtifactIds>
                                <excludeGroupIds>${exclude.groupids}</excludeGroupIds>
                                <excludeTransitive>true</excludeTransitive>
                                <excludeTypes>zip,war</excludeTypes>
                                <stripVersion>true</stripVersion>
                                <silent>false</silent>
                            </configuration>
                        </execution>
                        
                        <!-- Copy source dependencies. This extra step is activated by the "embed-source" profile (see below). -->
                        <execution>
                            <id>process-step1a</id>
                            <phase>does not exists</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                <classifier>sources</classifier>
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${temp.modules.dir}</outputDirectory>
                                <useSubDirectoryPerType>false</useSubDirectoryPerType>
                                <overWriteReleases>false</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                                <includeScope>compile</includeScope>
                                <includeScope>runtime</includeScope>
                                <excludeArtifactIds>${packager.artifact.excludes}</excludeArtifactIds>
                                <excludeGroupIds>${exclude.groupids}</excludeGroupIds>
                                <excludeTransitive>true</excludeTransitive>
                                <excludeTypes>zip,war</excludeTypes>
                                <stripVersion>true</stripVersion>
                                <silent>false</silent>
                            </configuration>
                        </execution>
                        
                        <!-- Unpack zip dependencies -->
                        <execution>
                            <id>process-step2</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>unpack-dependencies</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${temp.dir}</outputDirectory>
                                <includeTypes>zip</includeTypes>
                                <excludes>${zip.excludes}</excludes>
                                <overWriteReleases>false</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                                <excludeTransitive>true</excludeTransitive>
                                <silent>false</silent>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
          
        
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <dependencies>
                        <dependency>
                            <groupId>ant-contrib</groupId>
                            <artifactId>ant-contrib</artifactId>
                            <version>1.0b3</version>
                            <exclusions>
                                <exclusion>
                                    <groupId>ant</groupId>
                                    <artifactId>ant</artifactId>
                                </exclusion>
                            </exclusions>
                        </dependency>
                    </dependencies>
                    <executions>
                            
                        <!-- 4. As an extra option for the IPS system, compress modules with pack200. Activated via the "ips" profile that every module has. -->
                        <execution>
                            <id>process-step4</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target if="ips.compress">
                                    <apply executable="pack200" dest="${stage.dir}/glassfish/modules" parallel="false">
                                        <targetfile />
                                        <srcfile />
                                        <fileset dir="${stage.dir}/glassfish/modules" includes="**/*.jar" excludes="**/javahelp.jar,**/org.eclipse.persistence.*.jar" />
                                        <mapper type="glob" from="*.jar" to="*.pack.gz" />
                                    </apply>
                                    <apply executable="unpack200" dest="${stage.dir}/glassfish/modules" parallel="false">
                                        <srcfile />
                                        <targetfile />
                                        <fileset dir="${stage.dir}/glassfish/modules" includes="**/*.pack.gz" />
                                        <mapper type="glob" from="*.pack.gz" to="*.jar" />
                                    </apply>
                                    <!--remove *.pack.gz files-->
                                    <delete>
                                        <fileset dir="${stage.dir}/glassfish/modules" includes="**/*.pack.gz" />
                                    </delete>
                                </target>
                            </configuration>                         
                        </execution>
                        
                        <!-- 
                    		16. Merge sources into the main jars. This extra step is activated by the "embed-source" profile (see below).
                 		-->
                        <execution>
                            <id>process-step3a</id>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath" />
                                    
                                    <if> <available file="${stage.dir}/glassfish/modules/" type="dir" /> <then>
        
                                        <for param="file">
                                            <path>
                                                <fileset dir="${stage.dir}/glassfish/modules/">
                                                    <include name="*.jar" />
                                                    <exclude name="*-sources.jar"/>
                                                </fileset>
                                            </path>
                                            <sequential>
                                                <local name="filename" />
                                                <basename property="filename" file="@{file}" suffix=".jar"/>
                                                <echo message="${filename}" />
                                                
                                                <zip destfile="${stage.dir}/glassfish/modules/${filename}-aaaa.jar">
                                                    <zipfileset src="${stage.dir}/glassfish/modules/${filename}-sources.jar" includes="**/*.java" erroronmissingarchive="false"/>
                                                    <zipgroupfileset dir="${stage.dir}/glassfish/modules/" includes="${filename}.jar" />
                                                </zip>
            
                                                <delete>
                                                    <fileset dir="${stage.dir}/glassfish/modules/" includes="${filename}-sources.jar" />
                                                    <fileset dir="${stage.dir}/glassfish/modules/" includes="${filename}.jar" />
                                                </delete>
                                            </sequential>
                                        </for>
        
                                        <!-- 
                                            Ant Move is not powerful enough to be able to move from *something.jar to *.jar, even though it should.
                                            Therefor we move in two steps. 
                                        -->
                                        <move todir="${stage.dir}/glassfish/modules/">
                                            <fileset dir="${stage.dir}/glassfish/modules/" includes="**/*.jar" />
                                            <mapper type="glob" from="*.jar" to="*.zip" />
                                        </move>
                                        
                                        <move todir="${stage.dir}/glassfish/modules/">
                                            <fileset dir="${stage.dir}/glassfish/modules/" includes="*.zip" />
                                            <globmapper from="*-aaaa.zip" to="*.jar"/>
                                        </move>
                                    </then> </if>
                                </target>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                
                
                <!-- 4. Process any assembly directives in the module, if present -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>process-step3</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <descriptors>
                            <descriptor>${basedir}/src/main/assembly/${project.artifactId}.xml</descriptor>
                        </descriptors>
                        <ignoreMissingDescriptor>true</ignoreMissingDescriptor>
                        <finalName>${stage.dir.name}</finalName>
                        <attach>false</attach>
                        <appendAssemblyId>false</appendAssemblyId>
                        <useProjectArtifact>false</useProjectArtifact>
                    </configuration>
                </plugin>
                
                
                <!-- 4 & 17. Use our own build helper to execute Python (4) and create the zipped version of all dependencies (17) -->
                <plugin>
                    <groupId>org.glassfish.build</groupId>
                    <artifactId>glassfishbuild-maven-plugin</artifactId>
                    <executions>
                         
                         <!-- Run the pkg_proto.py scripts. Activated via the "ips" profile that every module has -->
                         <execution>
                            <id>process-step5</id>
                            <phase>process-resources</phase>
                            <configuration>
                                <executable>${python}</executable>
                                <workingDir>${basedir}</workingDir>
                                <commandlineArgs>${uc.toolkit.dir}/pkg/bin/makepkgs.py -s ${repo.url} -b ${stage.dir} ${pkg_proto.py}</commandlineArgs>
                            </configuration>
                        </execution>
                    
                        <!-- The second core step of the packager: zip all dependencies into the final .zip file -->
                        <execution>
                            <id>default-zip</id>
                            <phase>package</phase>
                            <configuration>
                                <duplicate>preserve</duplicate>
                                <filesets>
                                    <fileset>
                                        <dir>${stage.dir}/..</dir>
                                        <fileMode>755</fileMode>
                                        <includes>**/bin/*</includes>
                                        <includes>**/bin/*.bat</includes>
                                        <includes>**/lib/nadmin*</includes>
                                        <excludes>**/pkg_proto.py</excludes>
                                    </fileset>
                                    <fileset>
                                        <dir>${stage.dir}/..</dir>
                                        <excludes>**/pkg_proto.py</excludes>
                                    </fileset>
                                </filesets>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <configuration>
                        <skip>true</skip>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    
    <!-- Alternative profile: embed the sources into each dependency (for trivial source lookup in IDEs) -->
    <profiles>
        <profile>
            <id>embed-source</id>
            <activation><activeByDefault>false</activeByDefault></activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>process-step1a</id>
                                <phase>process-resources</phase>
                            </execution>
                        </executions>
                    </plugin>
        
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>process-step3a</id>
                                <phase>prepare-package</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    
</project>
