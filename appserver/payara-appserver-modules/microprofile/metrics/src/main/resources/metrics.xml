<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright (c) 2018-2019 Payara Foundation and/or its affiliates. All rights reserved.

The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common Development
and Distribution License("CDDL") (collectively, the "License").  You
may not use this file except in compliance with the License.  You can
obtain a copy of the License at
https://github.com/payara/Payara/blob/master/LICENSE.txt
See the License for the specific
language governing permissions and limitations under the License.

When distributing the software, include this License Header Notice in each
file and include the License file at glassfish/legal/LICENSE.txt.

GPL Classpath Exception:
The Payara Foundation designates this particular file as subject to the "Classpath"
exception as provided by the Payara Foundation in the GPL Version 2 section of the License
file that accompanied this code.

Modifications:
If applicable, add the following below the License Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyright [year] [name of copyright owner]"

Contributor(s):
If you wish your version of this file to be governed by only the CDDL or
only the GPL Version 2, indicate your decision by adding "[Contributor]
elects to include this software in this distribution under the [CDDL or GPL
Version 2] license."  If you don't indicate a single choice of license, a
recipient has the option to distribute your version of this file under
either the CDDL, the GPL Version 2 or to extend the choice of license to
its licensees as provided above.  However, if you add GPL Version 2 code
and therefore, elected the GPL Version 2 license, then the option applies
only if the new code is made subject to such option by the copyright
holder.
-->
<config>
    <base>
        <metadata>
            <name>memory.maxHeap</name>
            <mbean>java.lang:type=Memory/HeapMemoryUsage#max</mbean>
            <type>gauge</type>
            <unit>bytes</unit>
            <displayName>HeapMemory Max Usage</displayName>
            <description>Displays the maximum amount of memory in bytes that can be used for HeapMemory.</description>
        </metadata>
        <metadata>
            <name>memory.usedHeap</name>
            <mbean>java.lang:type=Memory/HeapMemoryUsage#used</mbean>
            <type>gauge</type>
            <unit>bytes</unit>
            <displayName>HeapMemory Used</displayName>
            <description>Displays the amount of used memory in bytes.</description>
        </metadata>
        <metadata>
            <name>memory.committedHeap</name>
            <mbean>java.lang:type=Memory/HeapMemoryUsage#committed</mbean>
            <type>gauge</type>
            <unit>bytes</unit>
            <displayName>HeapMemory Committed</displayName>
            <description>Displays the amount of memory in bytes that is committed for the JVM to use.</description>
        </metadata>
        <metadata>
            <name>thread.count</name>
            <mbean>java.lang:type=Threading/ThreadCount</mbean>
            <type>gauge</type>
            <unit>none</unit>
            <displayName>Current Thread count</displayName>
            <description>Displays the current number of live threads including both daemon and non-daemon threads.</description>
        </metadata>
        <metadata>
            <name>thread.daemon.count</name>
            <mbean>java.lang:type=Threading/DaemonThreadCount</mbean>
            <type>gauge</type>
            <unit>none</unit>
            <displayName>Daemon Thread Count</displayName>
            <description>Displays the current number of live daemon threads.</description>
        </metadata>
        <metadata>
            <name>thread.max.count</name>
            <mbean>java.lang:type=Threading/PeakThreadCount</mbean>
            <type>gauge</type>
            <unit>none</unit>
            <displayName>Peak Thread Count</displayName>
            <description>Displays the peak live thread count since the Java virtual machine started or peak was reset. This includes daemon and non-daemon threads.</description>
        </metadata>
        <metadata>
            <name>classloader.loadedClasses.count</name>
            <mbean>java.lang:type=ClassLoading/LoadedClassCount</mbean>
            <type>gauge</type>
            <unit>none</unit>
            <displayName>Currently Loaded Class Count</displayName>
            <description>Displays the number of classes that are currently loaded in the JVM.</description>
        </metadata>
        <metadata>
            <name>classloader.loadedClasses.total</name>
            <mbean>java.lang:type=ClassLoading/TotalLoadedClassCount</mbean>
            <type>counter</type>
            <unit>none</unit>
            <displayName>Total Loaded Class Count</displayName>
            <description>Displays the total number of classes that have been loaded since the JVM has started execution.</description>
        </metadata>
        <metadata>
            <name>classloader.unloadedClasses.total</name>
            <mbean>java.lang:type=ClassLoading/UnloadedClassCount</mbean>
            <type>counter</type>
            <unit>none</unit>
            <displayName>Total Unloaded Class Count</displayName>
            <description>Displays the total number of classes unloaded since the JVM has started execution.</description>
        </metadata>
        <metadata>
            <name>cpu.availableProcessors</name>
            <mbean>java.lang:type=OperatingSystem/AvailableProcessors</mbean>
            <type>gauge</type>
            <unit>none</unit>
            <displayName>Available Processors</displayName>
            <description>Displays the number of processors available to the JVM. This value may change during a particular invocation of the virtual machine.</description>
        </metadata>
        <metadata>
            <name>cpu.systemLoadAverage</name>
            <mbean>java.lang:type=OperatingSystem/SystemLoadAverage</mbean>
            <type>gauge</type>
            <unit>none</unit>
            <displayName>System Load Average</displayName>
            <description>Displays the system load average for the last minute. The system load average is the sum of the number of runnable entities queued to the available processors and the number of runnable entities running on the available processors averaged over a period of time. The way in which the load average is calculated is operating system specific but is typically a damped time-dependent average. If the load average is not available, a negative value is displayed. This attribute is designed to provide a hint about the system load and may be queried frequently. The load average may be unavailable on some platform where it is expensive to implement this method.</description>
        </metadata>
        <metadata>
            <name>jvm.uptime</name>
            <mbean>java.lang:type=Runtime/Uptime</mbean>
            <type>gauge</type>
            <unit>milliseconds</unit>
            <displayName>JVM Uptime</displayName>
            <description>Displays the uptime of the JVM in milliseconds.</description>
        </metadata>
        <metadata>
            <name>gc.total</name>
            <tags>
                <tag>
                    <name>name</name>
                    <value>%s</value>
                </tag>
            </tags>
            <mbean>java.lang:type=GarbageCollector,name=%s/CollectionCount</mbean>
            <dynamic>false</dynamic>
            <type>counter</type>
            <unit>none</unit>
            <displayName>Garbage Collection Count</displayName>
            <description>Displays the total number of collections that have occurred. This attribute lists -1 if the collection count is undefined for this collector.</description>
        </metadata>
        <metadata>
            <name>gc.time</name>
            <tags>
                <tag>
                    <name>name</name>
                    <value>%s</value>
                </tag>
            </tags>
            <mbean>java.lang:type=GarbageCollector,name=%s/CollectionTime</mbean>
            <dynamic>false</dynamic>
            <type>counter</type>
            <unit>milliseconds</unit>
            <displayName>Garbage Collection Time</displayName>
            <description>Displays the approximate accumulated collection elapsed time in milliseconds. This attribute displays -1 if the collection elapsed time is undefined for this collector. The JVM implementation may use a high resolution timer to measure the elapsed time. This attribute may display the same value even if the collection count has been incremented if the collection elapsed time is very short.</description>
        </metadata>
        
        <!--extended metadata-->
        <metadata>
            <name>memory.maxNonHeap</name>
            <mbean>java.lang:type=Memory/NonHeapMemoryUsage#max</mbean>
            <type>gauge</type>
            <unit>bytes</unit>
            <displayName>NonHeapMemory Max Usage</displayName>
            <description>Displays the maximum amount of memory in bytes that can be used for NonHeapMemory.</description>
        </metadata>
        <metadata>
            <name>memory.usedNonHeap</name>
            <mbean>java.lang:type=Memory/NonHeapMemoryUsage#used</mbean>
            <type>gauge</type>
            <unit>bytes</unit>
            <displayName>NonHeapMemory Used</displayName>
            <description>Displays the amount of used memory in bytes.</description>
        </metadata>
        <metadata>
            <name>memory.committedNonHeap</name>
            <mbean>java.lang:type=Memory/NonHeapMemoryUsage#committed</mbean>
            <type>gauge</type>
            <unit>bytes</unit>
            <displayName>NonHeapMemory Committed</displayName>
            <description>Displays the amount of memory in bytes that is committed for the JVM to use.</description>
        </metadata>
    </base>
    <vendor>
        <!--sample metadata-->
        <metadata>
            <name>system.cpu.load</name>
            <mbean>java.lang:type=OperatingSystem/SystemCpuLoad</mbean>
            <type>gauge</type>
            <unit>none</unit>
            <displayName>System Cpu Load</displayName>
            <description>Display the "recent cpu usage" for the whole system. This value is a double in the [0.0,1.0] interval. A value of 0.0 means that all CPUs were idle during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running 100% of the time during the recent period being observed. All values betweens 0.0 and 1.0 are possible depending of the activities going on in the system. If the system recent cpu usage is not available, the method returns a negative value.</description>
        </metadata>
    </vendor>
</config>
