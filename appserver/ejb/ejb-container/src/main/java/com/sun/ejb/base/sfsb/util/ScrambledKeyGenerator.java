/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package com.sun.ejb.base.sfsb.util;


import org.glassfish.internal.api.SharedSecureRandom;

import com.sun.ejb.spi.sfsb.util.SFSBUUIDUtil;
import com.sun.enterprise.util.Utility;

/**
 * A utility class that generates stateful session keys using two longs
 * The session id generated by this class is guarenteed to be unique as 
 * long as the system clock is never reset to a previous value
 * 
 * The hashCode of the SessionKey generated by ScrambledKeyGenerator 
 * also allows uniform distribution of keys when hashed in a HashMap
 *
 * @author  Mahesh Kannan
 */
public class ScrambledKeyGenerator
    extends SimpleKeyGenerator
{

    private int cachedTime = (int) System.currentTimeMillis();

    public ScrambledKeyGenerator() {
	init((int) System.currentTimeMillis(), System.identityHashCode(this));
    }

    public ScrambledKeyGenerator(byte[] ipAddress, int port) {
	init(Utility.bytesToInt(ipAddress, 0), port);
    }

    public ScrambledKeyGenerator(long val) {
	init((int) (val >>> 32), (int) ((val << 32) >>> 32));
    }

    private void init(int hi, int lo) {
	byte[] hiBytes = new byte[4];
	Utility.intToBytes(hi, hiBytes, 0);
	byte[] loBytes = new byte[4];
	Utility.intToBytes(lo, loBytes, 0);

	swapBytes(hiBytes, loBytes, 2, 3);
	swapBytes(loBytes, loBytes, 2, 3);
	swapBytes(hiBytes, loBytes, 3, 0);
	swapBytes(hiBytes, hiBytes, 0, 3);
	swapBytes(hiBytes, loBytes, 1, 3);

	swapBytes(hiBytes, hiBytes, 0, 1);
	swapBytes(loBytes, loBytes, 2, 3);

        this.prefix = Utility.bytesToInt(hiBytes, 0);
	this.prefix <<= 32;
	
        this.suffix = Utility.bytesToInt(loBytes, 0);
	this.suffix <<= 32;

        //Inital isCounter value
        this.idCounter = 0;

        //Set the default time value
        this.cachedTime = (int) System.currentTimeMillis();
    }

    private static final void swapBytes(byte[] a, byte[] b,
	    int index1, int index2)
    {
	byte temp = a[index1];
	a[index1] = b[index2];
	b[index2] = temp;
    }

    /**
     * Create and return the sessionKey.
     * @return the sessionKey object
     */
    @Override
    public SimpleSessionKey createSessionKey() {
        int id = 0;
        synchronized (this) {
            id = ++idCounter;
            if (id < 0) {
                //idCounter wrapped around!!
                id = idCounter = 1;
	    }

	    if ((id & 0x000000FF) == 0) {
                cachedTime = (int) System.currentTimeMillis();
            }
        }
	
	return new SimpleSessionKey(
	    prefix + cachedTime,
	    //suffix + System.identityHashCode(new Object()), id
	    suffix + SharedSecureRandom.get().nextInt(), id
	);
    }
    
}
    
