#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2010-2013 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#
# Portions Copyright [2016] [Payara Foundation]
create.jvm.options=creates JVM options in the Java configuration or profiler element of the domain.xml file.
create.jvm.options.jvm_option_name=The left side of the equal sign (=) is the JVM option name. The right side of the equal sign (=) is the JVM option value. A colon (:) is a delimiter for multiple options.
create.jvm.options.usagetext=create-jvm-options\n\t[--target <target(default:server)>]\n\t[--profiler[=<profiler(default:false)>]]\n\t[--min-jvm=<version>]\n\t[--max-jvm=<version>]\n\t[-?|--help[=<help(default:false)>]]\n\t(jvm_option_name[=jvm_option_value])[:jvm_option_name[=jvm_option_name]]*
delete.jvm.options=removes JVM options from the Java configuration or profiler elements of the domain.xml file
delete.jvm.options.jvm_option_name=The left side of the equal sign (=) is the JVM option name. The right side of the equal sign (=) is the JVM option value. A colon (:) is a delimiter for multiple options.
delete.jvm.options.usagetext=delete-jvm-options\n\t[--target <target(default:server)>]\n\t[--profiler[=<profiler(default:false)>]]\n\t[-?|--help[=<help(default:false)>]]\n\t(jvm_option_name[=jvm_option_value])[:jvm_option_name[=jvm_option_name]]*
list.jvm.options=lists JVM options in the Java configuration or profiler element of the domain.xml file.
list.jvm.options.success=Listing configured JVM Options and Java System Properties on given target successful
list.jvm.options.failed=Listing JVM options failed on given target for following reason: {0}
create.jvm.options.success=Creating the given Option(s) on given target successful
delete.jvm.options.success=Deleting the given Option(s) on given target successful
delete.jvm.options.failed=Deleting given option(s) on given target failed for following reason,\nthe current options in configuration have been retained
create.profiler.first=No profiler configured yet. Create a profiler first.
created.message=Created {0} option(s)
no.option.created=No jvm-options were created (perhaps they were already present)
deleted.message=Deleted {0} option(s)
no.option.deleted=No jvm-options were deleted (perhaps they never existed in the configuration)
joe.exists=JVM option {0} already exists in the configuration.
joe.invalid.start=JVM option {0} is invalid because it does not start with a ''-''
joe.invalid.cmd.syntax=The command line:{0} does not satisfy the syntax.\nIn a nutshell, all options should start with a ''-'', multiple options are separated by a '':''.\nA '':'' inside an option should be escaped with a ''\\''.\nSince shell interprets command arguments, make sure you quote it.\n
soft.invalid.xmx=It appears that given JVM option {0} represents invalid maximum heap for the JVM. Ensure that it is valid, by doing list-jvm-options.
soft.xmx.exists=The configuration already has maximum heap size specified: {0}. Verify the java configuration by doing list-jvm-options.
soft.xmx.smaller.than.xms=It appears that the maximum heap size specified: {0} is smaller than the minimum heap size in the configuration: {1}. JVM might not start. Ensure that this is valid, by doing doing list-jvm-options.
soft.invalid.xms=It appears that given JVM option {0} represents invalid initial heap for the JVM. Ensure that it is valid, by doing list-jvm-options.
soft.xms.exists=The configuration already has initial heap size specified: {0}. Verify the java configuration by doing list-jvm-options.
soft.xms.larger.than.xmx=It appears that the initial heap size specified: {0} is larger than the maximum heap size in the configuration: {1}. JVM might not start. Ensure that this is valid, by doing doing list-jvm-options.
#Generate JVM Report
server.unreachable=The server {0} seems to be unreachable. This means either it is not running or there is an internal communication error.
td.title=Full Java Thread Dump {0} {1} {2}
thread.no=Number of threads: {0}
daemon.thread.no=Number of daemon threads: {0}
peak.thread.no=Peak live thread count since the Java virtual machine started or peak was reset: {0}
thread.contention.monitoring.supported=Is support for thread contention monitoring available on this JVM? [{0}]
thread.contention.monitoring.enabled=Is thread contention monitoring enabled? [{0}]. If false, some thread synchronization statistics are not be available.
thread.cputime.supported=Is support for CPU time measurement for any thread available on this JVM? [{0}]
thread.cputime.enabled=Is thread CPU time measurement enabled? [{0}]. If false, thread execution times are not available for any thread.
execution.info=Thread Execution Information:
thread.title=Thread {0} thread-id: {1} thread-state: {2}
thread.waiting.on=Waiting on lock: {0}
thread.suspended=Suspended
thread.in.native=Running in native
thread.stack.element=\t at: {0}
no.deadlock=No deadlock found
sync.info=Thread Synchronization Statistics:
thread.blocked.times=Number of times this thread was blocked (to enter/reenter a Monitor): {0}
thread.blocked.totaltime=Total (approximate) time the thread was in BLOCKED state: {0} milliseconds since thread contention monitoring was last enabled.
thread.total.cpu.time=Total CPU time for this thread: {0} seconds {1} nanoseconds.
thread.cpu.user.time=User-level CPU time for this thread: {0} seconds {1} nanoseconds.
wait.times=Number of times this thread waited for a notification (i.e. it was in WAITING or TIMED_WAITING state): {0}
lock.owner.details=This thread is blocked waiting on lock owned currently by thread named: {0}, id: {1}
monitor.info=Object Monitors currently held or requested by this thread: {0}
ownable.sync.info=Ownable Synchronizers (e.g. ReentrantLock and ReentrantReadWriteLock) held by this thread: {0}
deadlocks.found=Following thread(s) were deadlocked:
m2hms={0} Hours {1} Minutes {2} Seconds
m2sms={0} Seconds {1} Milliseconds
uptime=The uptime of Java Virtual Machine: {0}
memory.pool.name=Memory Pool Name: {0}
memory.usage.init=Memory that Java Virtual Machine initially requested to the Operating System: {0} Bytes
memory.usage.comm=Memory that Java Virtual Machine is guaranteed to receive from the Operating System: {0} Bytes
memory.usage.max=Maximum Memory that Java Virtual Machine may get from the Operating System: {0} Bytes. Note that this is not guaranteed.
memory.usage.used=Memory that Java Virtual Machine uses at this time: {0} Bytes
gc.name=Name of the Garbage Collector: {0}
gc.numcol=Number of collections occurred using this garbage collector: {0} Bytes
gc.coltime=Garbage Collection Time: {0}
heap.mem.usage=Heap Memory Usage:
nonheap.mem.usage=Non-heap Memory Usage:
obj.fin.pending=Approximate number of objects for which finalization is pending: {0}
classloading.info=Class loading and unloading in the Java Virtual Machine:
classes.loaded=Number of classes currently loaded in the Java Virtual Machine: {0}
classes.total=Number of classes loaded in the Java Virtual Machine since the startup: {0}
classes.unloaded=Number of classes unloaded from the Java Virtual Machine: {0}
complilation.info=Just-in-time (JIT) compilation information in the Java Virtual Machine:
compilation.monitor.status=Java Virtual Machine compilation monitoring allowed: {0}
jit.compilar.name=Name of the Just-in-time (JIT) compiler: {0}
compilation.time=Total time spent in compilation: {0}
os.info=Operating System Information:
os.name=Name of the Operating System: {0}
os.arch=Binary Architecture name of the Operating System: {0}, Version: {1}
os.nproc=Number of processors available on the Operating System: {0}
os.load=System load on the available processors for the last minute: {0}. (Sum of running and queued runnable entities per minute)
rt.info=General Java Runtime Environment Information for the VM: {0}
rt.bcp=JRE BootClassPath: {0}
rt.cp=JRE ClassPath: {0}
rt.libpath=JRE Native Library Path: {0}
rt.nvv=JRE name: {0} Vendor: {1} Version: {2}
rt.sysprops=List of System Properties for the Java Virtual Machine:
rt.arguments=List of JVM Arguments
summary.title=**** Java Virtual Machine [App Server Instance Name: {0}] Summary ****
class.info.title=**** Class Statistics for Java Virtual Machine [App Server Instance Name: {0}] ****
thread.dump.title=**** Thread Dump for Java Virtual Machine [App Server Instance Name: {0}] ****
memory.info.title=**** Memory (Perm Gen, Eden Space etc.) Information for Java Virtual Machine [App Server Instance Name: {0}] ****
#logging information
logging.config.file=Effective logging properties file:[{0}]. If null, it indicates JRE standard file.
reg.loggers=Number of loggers currently registered in the JVM: [{0}]. Details follow:
logger.details.1=If the level is blank, it is inherited from parent logger
logger.details.2=Parent logger is the nearest existing parent logger
list.of.loggers=Logger Name | Logging Level | Parent Logger Name
create.threadpool.duplicate=Thread Pool named {0} already exists.
create.threadpool.failed=Creation of: {0} failed because of: {1}
create.threadpool.deprecated.workqueues=Deprecated Syntax: --workqueues option is deprecated for create-threadpool command.
list.thread.pools.failed=List Thread Pools failed because of: {0}
delete.threadpool.notexists=Thread Pool named {0} does not exist.
delete.threadpool.failed=Delete Thread Pool failed because of: {0}
attach.wrong.commandinstance.id=Job with id {0} does not exist.
attach.finished=Command {0} executed with status {1}.
user.not.authorized = User {0} not authorized to attach to job {1}

getPayload.wrong.commandinstance.id=Job with id {0} does not exist.
getPayload.nopayload=Outbound payload does not exist.
getPayload.unsupported=Payload type is not supported. Can not download data.
