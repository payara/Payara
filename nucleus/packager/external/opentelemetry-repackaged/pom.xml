<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~
  ~  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  ~
  ~  Copyright (c) 2023 Payara Foundation and/or its affiliates. All rights reserved.
  ~
  ~  The contents of this file are subject to the terms of either the GNU
  ~  General Public License Version 2 only ("GPL") or the Common Development
  ~  and Distribution License("CDDL") (collectively, the "License").  You
  ~  may not use this file except in compliance with the License.  You can
  ~  obtain a copy of the License at
  ~  https://github.com/payara/Payara/blob/master/LICENSE.txt
  ~  See the License for the specific
  ~  language governing permissions and limitations under the License.
  ~
  ~  When distributing the software, include this License Header Notice in each
  ~  file and include the License file at glassfish/legal/LICENSE.txt.
  ~
  ~  GPL Classpath Exception:
  ~  The Payara Foundation designates this particular file as subject to the "Classpath"
  ~  exception as provided by the Payara Foundation in the GPL Version 2 section of the License
  ~  file that accompanied this code.
  ~
  ~  Modifications:
  ~  If applicable, add the following below the License Header, with the fields
  ~  enclosed by brackets [] replaced by your own identifying information:
  ~  "Portions Copyright [year] [name of copyright owner]"
  ~
  ~  Contributor(s):
  ~  If you wish your version of this file to be governed by only the CDDL or
  ~  only the GPL Version 2, indicate your decision by adding "[Contributor]
  ~  elects to include this software in this distribution under the [CDDL or GPL
  ~  Version 2] license."  If you don't indicate a single choice of license, a
  ~  recipient has the option to distribute your version of this file under
  ~  either the CDDL, the GPL Version 2 or to extend the choice of license to
  ~  its licensees as provided above.  However, if you add GPL Version 2 code
  ~  and therefore, elected the GPL Version 2 license, then the option applies
  ~  only if the new code is made subject to such option by the copyright
  ~  holder.
  ~
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>fish.payara.server.core</groupId>
        <artifactId>core-parent</artifactId>
        <version>6.8.0-SNAPSHOT</version>
        <relativePath>../../../../core/core-parent</relativePath>
    </parent>


    <groupId>fish.payara.server.core.packager</groupId>
    <artifactId>opentelemetry-repackaged</artifactId>
    <name>Repackaged OpenTelemetry</name>
    <description>OpenTelemetry API and SDK repackaged as OSGi bundle</description>

    <properties>
        <jar.manifest/>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-sdk-extension-autoconfigure</artifactId>
            <scope>compile</scope>
            <optional>true</optional>
        </dependency>
        <!-- we will rely on transitive dependencies of our leaf ones -->
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-opentracing-shim</artifactId>
            <scope>compile</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-otlp</artifactId>
            <scope>compile</scope>
            <optional>true</optional>
            <exclusions>
                <exclusion>
                    <!-- okhttp3 version 4 is kotlin-based, bring in kotlin stdlib -->
                    <groupId>com.squareup.okhttp3</groupId>
                    <artifactId>okhttp</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Not a perfect solution to the problem, but we need to wait for OTEL project
             to decouple their exporter from OkHttp so that we can replace HTTP transport -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>3.14.9</version>
            <scope>compile</scope>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <!-- next we need to relocate okhttp, and add OSGi manifest -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <configuration>
                    <instructions>
                        <Export-Package>
                            io.opentelemetry.*;version=${opentelemetry.version}
                        </Export-Package>
                        <!-- Import API classes, not bundled okhttp -->
                        <Import-Package>
                            !okhttp.*, !fish.payara.shaded.*, !android.*,
                            !com.google.common.*,
                            io.grpc.*;resolution:=optional,
                            io.netty.*;resolution:=optional,
                            !*.shaded.*,
                            !org.checkerframework.checker.nullness.qual,
                            !org.conscrypt,sun.misc;version=!,
                            !javax.annotation.*,
                            *
                        </Import-Package>
                        <!-- Embed the dependencies and then shade them in next step -->
                        <Embed-Dependency>
                            *;groupId=com.squareup.*;inline=true,
                            *;groupId=io.opentelemetry;inline=true,
                        </Embed-Dependency>
                        <Embed-Transitive>true</Embed-Transitive>
                    </instructions>
                </configuration>
                <executions>
                    <execution>
                        <id>bundle</id>
                        <goals>
                            <goal>bundle</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <createSourcesJar>true</createSourcesJar>
                    <artifactSet>
                        <includes>
                            <include>com.squareup.*:*</include>
                        </includes>
                    </artifactSet>
                    <filters>
                        <!-- bundle plugin already inlined the classes, so we can skip the contents -->
                        <filter>
                            <artifact>com.squareup.*:*</artifact>
                            <excludes>
                                <exclude>**</exclude>
                            </excludes>
                        </filter>
                    </filters>
                    <relocations>
                        <relocation>
                            <pattern>okhttp3.</pattern>
                            <shadedPattern>fish.payara.shaded.okhttp3.</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>okio.</pattern>
                            <shadedPattern>fish.payara.shaded.okio.</shadedPattern>
                        </relocation>
                    </relocations>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>