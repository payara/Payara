name: Generate Monthly Metrics Report
on:
  workflow_dispatch:
  schedule:
    - cron: '0 13 1 * *'

permissions:
  issues: write
  pull-requests: read

jobs:
  report-monthly-metrics:
    name: Report Monthly Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Get filter timeframe
        shell: bash
        run: |
          # Calculate the first day of the previous month
          first_day=$(date -d "last month" +%Y-%m-01)
          # Calculate the last day of the previous month
          last_day=$(date -d "$first_day +1 month -1 day" +%Y-%m-%d)
          
          # Set environment variables with the date range
          echo "first_day=$first_day" >> "$GITHUB_ENV"
          echo "last_day=$last_day" >> "$GITHUB_ENV"
          echo "last_month=$first_day..$last_day" >> "$GITHUB_ENV"

      - name: Run issue-metrics action, raised issues
        id: issue-metrics-raised
        uses: github/issue-metrics@v3
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABELS_TO_MEASURE: 'Status: Open,Status: Accepted,Status: Pending'
          SEARCH_QUERY: 'repo:${{ github.repository }} is:issue created:${{ env.last_month }}'

      - name: Run issue-metrics action, closed issues
        id: issue-metrics-closed
        uses: github/issue-metrics@v3
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABELS_TO_MEASURE: 'Status: Open,Status: Accepted,Status: Pending'
          SEARCH_QUERY: 'repo:${{ github.repository }} is:issue closed:${{ env.last_month }}'

      - uses: actions/checkout@v3
      - name: Count Accepted Issues
        id: count-accepted-issues
        uses: actions/github-script@v6
        with:
          script: |
            const script = require('./.github/workflows/scripts/countEscalatedIssues.js');
            return await script({github, context, core});
      - name: Parse Metric Results
        uses: actions/github-script@v6
        with:
          script: |
            const raisedMetricsResult = `${{ steps.issue-metrics-raised.outputs.metrics }}`;
            const closedMetricsResult = `${{ steps.issue-metrics-closed.outputs.metrics }}`;
            
            if(raisedMetricsResult != ''){
              const raisedMetrics = JSON.parse(raisedMetricsResult);
              core.exportVariable('time_to_first_response_1', raisedMetrics['average_time_to_first_response']);
              core.exportVariable('time_to_close_1', raisedMetrics['average_time_to_close']);
              core.exportVariable('time_in_open_status_1', raisedMetrics.average_time_in_labels['Status: Open']);
              core.exportVariable('time_in_pending_status_1', raisedMetrics.average_time_in_labels['Status: Pending']);
              core.exportVariable('time_in_accepted_status_1', raisedMetrics.average_time_in_labels['Status: Accepted']);
              core.exportVariable('num_items_opened', raisedMetrics['num_items_opened']);
            }
            if(closedMetricsResult != ''){
              const closedMetrics = JSON.parse(closedMetricsResult);
              core.exportVariable('time_to_first_response_2', closedMetrics['average_time_to_first_response']);
              core.exportVariable('time_to_close_2', closedMetrics['average_time_to_close']);
              core.exportVariable('time_in_open_status_2', closedMetrics.average_time_in_labels['Status: Open']);
              core.exportVariable('time_in_pending_status_2', closedMetrics.average_time_in_labels['Status: Pending']);
              core.exportVariable('time_in_accepted_status_2', closedMetrics.average_time_in_labels['Status: Accepted']);
              core.exportVariable('num_items_closed', closedMetrics['num_items_closed']);
            }
      - name: Notify MS Teams channel Metrics Report
        id: notify-report-ms-teams
        uses: tlolkema/simple-teams-message@main
        with:
          webhook: ${{ secrets.COMMUNITY_EVENTS_WEBHOOK_URL }}
          message_title: Payara Community Repository Metrics - ${{ env.last_month }}
          message_description: The following are metrics for the Payara Community repository. "R" is for Raised Issues, "C" is for Closed Issues
          extra_text_blocks: |
            Avg time to first response: R=${{ env.time_to_first_response_1 }}, C=${{ env.time_to_first_response_2 }}||| 
            Avg time to close: R=${{ env.time_to_close_1 }}, C=${{ env.time_to_close_2 }}|||
            Avg time spent in Open status: R=${{ env.time_in_open_status_1 }}, C=${{ env.time_in_open_status_2 }}|||
            Avg time spent in Pending status: R=${{ env.time_in_pending_status_1 }}, C=${{ env.time_in_pending_status_2 }}|||
            Avg time spent in Accepted status: R=${{ env.time_in_accepted_status_1 }}, C=${{ env.time_in_accepted_status_2 }}
            |||
            Open Issues: ${{ env.num_items_opened }}|||
            Closed Issues: ${{ env.num_items_closed }}|||
            Escalated Issues: ${{ fromJSON(steps.count-accepted-issues.outputs.result) }}
